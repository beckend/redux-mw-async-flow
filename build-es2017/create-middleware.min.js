const tslib_1=require("tslib");const request_store_1=require("./request-store");const async_types_1=require("./async-types");const promise_factory_1=require("./promise-factory");const merge=require("lodash.merge");const lSet=require("lodash.set");const lGet=require("lodash.get");const uniqueid=require("uniqueid");const asyncUniqueId=uniqueid(null,"-@@ASYNC_MIDDLEWARE");exports.defaultOpts={metaKey:"asyncFlow",metaKeyRequestID:"REQUEST_ID",timeout:1E4,generateId:({action})=>`${asyncUniqueId()}-type--${action.type}`};
exports.createAsyncFlowMiddleware=(opts={metaKey:exports.defaultOpts.metaKey,timeout:exports.defaultOpts.timeout})=>{const {_REQUEST,_PENDING,_FULFILLED,_REJECTED,_ABORTED}=async_types_1.getAsyncTypeConstants({types:opts.types});const {metaKey,timeout,metaKeyRequestID,generateId}=tslib_1.__assign({},exports.defaultOpts,opts);const requestStore=new request_store_1.RequestStore;const middleware=()=>{return(next)=>{return(action)=>{const getDispatchResult=()=>next(action);const actionType=action.type;
if(lGet(action,["meta",metaKey,"enable"])===false)return getDispatchResult();const metaRequestIdPath=["meta",metaKey,metaKeyRequestID];if(actionType.endsWith(_REQUEST)){let currentRequestId=lGet(action,metaRequestIdPath);if(!currentRequestId||{}.hasOwnProperty.call(requestStore,currentRequestId)){do currentRequestId=generateId({action});while({}.hasOwnProperty.call(requestStore,currentRequestId));lSet(action,metaRequestIdPath,currentRequestId)}const metaTimeoutKey=lGet(action,["meta",metaKey,"timeoutRequest"]);
const timeoutRequest=metaTimeoutKey||timeout;const {promise,reject,resolve}=promise_factory_1.createPromise();promise.timeout(timeoutRequest,"timeout").finally(()=>{requestStore.delete(currentRequestId)});const tmpRequestStoreAddPayload={[request_store_1.REQUEST_KEY_PROMISE]:promise,[request_store_1.REQUEST_KEY_RESOLVEFN]:resolve,[request_store_1.REQUEST_KEY_REJECTFN]:reject};requestStore.add(currentRequestId,tmpRequestStoreAddPayload);const pendingAction=merge({},action,{type:`${actionType.substring(0,
actionType.length-_REQUEST.length)}${_PENDING}`,meta:{[metaKey]:{timeout,timeoutRequest,promise}}});next(pendingAction);const newAction=merge({},action,{meta:{[metaKey]:{promise}}});next(newAction);return}else if(actionType.endsWith(_FULFILLED)){const epicRequestId=lGet(action,metaRequestIdPath);if(epicRequestId)requestStore.resolve(lGet(action,metaRequestIdPath),action.payload);else console.warn(`${action.type} - meta data not found, did you forget to send it?`)}else if(actionType.endsWith(_REJECTED)){const epicRequestId=
lGet(action,metaRequestIdPath);if(epicRequestId)requestStore.reject(epicRequestId,action.payload);else console.warn(`${action.type} - meta data not found, did you forget to send it?`)}else if(actionType.endsWith(_ABORTED)){const epicRequestId=lGet(action,metaRequestIdPath);if(epicRequestId)requestStore.reject(epicRequestId,action.payload);else console.warn(`${action.type} - meta data not found, did you forget to send it?`)}return getDispatchResult()}}};return middleware};